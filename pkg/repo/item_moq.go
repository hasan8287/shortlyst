// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repo

import (
	"context"
	"shortlyst/pkg/model"
	"sync"
)

var (
	lockItemRepoMockAdd    sync.RWMutex
	lockItemRepoMockFind   sync.RWMutex
	lockItemRepoMockGet    sync.RWMutex
	lockItemRepoMockUpdate sync.RWMutex
)

// Ensure, that ItemRepoMock does implement ItemRepo.
// If this is not the case, regenerate this file with moq.
var _ ItemRepo = &ItemRepoMock{}

// ItemRepoMock is a mock implementation of ItemRepo.
//
//     func TestSomethingThatUsesItemRepo(t *testing.T) {
//
//         // make and configure a mocked ItemRepo
//         mockedItemRepo := &ItemRepoMock{
//             AddFunc: func(ctx context.Context, data model.Items) (model.Items, error) {
// 	               panic("mock out the Add method")
//             },
//             FindFunc: func(ctx context.Context, params map[string]interface{}, page int, size int) ([]model.Items, int, error) {
// 	               panic("mock out the Find method")
//             },
//             GetFunc: func(ctx context.Context, id string) (model.Items, error) {
// 	               panic("mock out the Get method")
//             },
//             UpdateFunc: func(ctx context.Context, data model.Items) (model.Items, error) {
// 	               panic("mock out the Update method")
//             },
//         }
//
//         // use mockedItemRepo in code that requires ItemRepo
//         // and then make assertions.
//
//     }
type ItemRepoMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(ctx context.Context, data model.Items) (model.Items, error)

	// FindFunc mocks the Find method.
	FindFunc func(ctx context.Context, params map[string]interface{}, page int, size int) ([]model.Items, int, error)

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, id string) (model.Items, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, data model.Items) (model.Items, error)

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data model.Items
		}
		// Find holds details about calls to the Find method.
		Find []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params map[string]interface{}
			// Page is the page argument value.
			Page int
			// Size is the size argument value.
			Size int
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data model.Items
		}
	}
}

// Add calls AddFunc.
func (mock *ItemRepoMock) Add(ctx context.Context, data model.Items) (model.Items, error) {
	if mock.AddFunc == nil {
		panic("ItemRepoMock.AddFunc: method is nil but ItemRepo.Add was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Data model.Items
	}{
		Ctx:  ctx,
		Data: data,
	}
	lockItemRepoMockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	lockItemRepoMockAdd.Unlock()
	return mock.AddFunc(ctx, data)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//     len(mockedItemRepo.AddCalls())
func (mock *ItemRepoMock) AddCalls() []struct {
	Ctx  context.Context
	Data model.Items
} {
	var calls []struct {
		Ctx  context.Context
		Data model.Items
	}
	lockItemRepoMockAdd.RLock()
	calls = mock.calls.Add
	lockItemRepoMockAdd.RUnlock()
	return calls
}

// Find calls FindFunc.
func (mock *ItemRepoMock) Find(ctx context.Context, params map[string]interface{}, page int, size int) ([]model.Items, int, error) {
	if mock.FindFunc == nil {
		panic("ItemRepoMock.FindFunc: method is nil but ItemRepo.Find was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params map[string]interface{}
		Page   int
		Size   int
	}{
		Ctx:    ctx,
		Params: params,
		Page:   page,
		Size:   size,
	}
	lockItemRepoMockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	lockItemRepoMockFind.Unlock()
	return mock.FindFunc(ctx, params, page, size)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//     len(mockedItemRepo.FindCalls())
func (mock *ItemRepoMock) FindCalls() []struct {
	Ctx    context.Context
	Params map[string]interface{}
	Page   int
	Size   int
} {
	var calls []struct {
		Ctx    context.Context
		Params map[string]interface{}
		Page   int
		Size   int
	}
	lockItemRepoMockFind.RLock()
	calls = mock.calls.Find
	lockItemRepoMockFind.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ItemRepoMock) Get(ctx context.Context, id string) (model.Items, error) {
	if mock.GetFunc == nil {
		panic("ItemRepoMock.GetFunc: method is nil but ItemRepo.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockItemRepoMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockItemRepoMockGet.Unlock()
	return mock.GetFunc(ctx, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedItemRepo.GetCalls())
func (mock *ItemRepoMock) GetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	lockItemRepoMockGet.RLock()
	calls = mock.calls.Get
	lockItemRepoMockGet.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ItemRepoMock) Update(ctx context.Context, data model.Items) (model.Items, error) {
	if mock.UpdateFunc == nil {
		panic("ItemRepoMock.UpdateFunc: method is nil but ItemRepo.Update was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Data model.Items
	}{
		Ctx:  ctx,
		Data: data,
	}
	lockItemRepoMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockItemRepoMockUpdate.Unlock()
	return mock.UpdateFunc(ctx, data)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedItemRepo.UpdateCalls())
func (mock *ItemRepoMock) UpdateCalls() []struct {
	Ctx  context.Context
	Data model.Items
} {
	var calls []struct {
		Ctx  context.Context
		Data model.Items
	}
	lockItemRepoMockUpdate.RLock()
	calls = mock.calls.Update
	lockItemRepoMockUpdate.RUnlock()
	return calls
}
