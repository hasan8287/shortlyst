// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repo

import (
	"context"
	"shortlyst/pkg/model"
	"sync"
)

var (
	lockSaldoRepoMockAdd    sync.RWMutex
	lockSaldoRepoMockFind   sync.RWMutex
	lockSaldoRepoMockGet    sync.RWMutex
	lockSaldoRepoMockUpdate sync.RWMutex
)

// Ensure, that SaldoRepoMock does implement SaldoRepo.
// If this is not the case, regenerate this file with moq.
var _ SaldoRepo = &SaldoRepoMock{}

// SaldoRepoMock is a mock implementation of SaldoRepo.
//
//     func TestSomethingThatUsesSaldoRepo(t *testing.T) {
//
//         // make and configure a mocked SaldoRepo
//         mockedSaldoRepo := &SaldoRepoMock{
//             AddFunc: func(ctx context.Context, data model.Saldo) (model.Saldo, error) {
// 	               panic("mock out the Add method")
//             },
//             FindFunc: func(ctx context.Context, params map[string]interface{}) ([]model.Saldo, int, error) {
// 	               panic("mock out the Find method")
//             },
//             GetFunc: func(ctx context.Context, value int) (model.Saldo, error) {
// 	               panic("mock out the Get method")
//             },
//             UpdateFunc: func(ctx context.Context, data model.Saldo) (model.Saldo, error) {
// 	               panic("mock out the Update method")
//             },
//         }
//
//         // use mockedSaldoRepo in code that requires SaldoRepo
//         // and then make assertions.
//
//     }
type SaldoRepoMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(ctx context.Context, data model.Saldo) (model.Saldo, error)

	// FindFunc mocks the Find method.
	FindFunc func(ctx context.Context, params map[string]interface{}) ([]model.Saldo, int, error)

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, value int) (model.Saldo, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, data model.Saldo) (model.Saldo, error)

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data model.Saldo
		}
		// Find holds details about calls to the Find method.
		Find []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params map[string]interface{}
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Value is the value argument value.
			Value int
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data model.Saldo
		}
	}
}

// Add calls AddFunc.
func (mock *SaldoRepoMock) Add(ctx context.Context, data model.Saldo) (model.Saldo, error) {
	if mock.AddFunc == nil {
		panic("SaldoRepoMock.AddFunc: method is nil but SaldoRepo.Add was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Data model.Saldo
	}{
		Ctx:  ctx,
		Data: data,
	}
	lockSaldoRepoMockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	lockSaldoRepoMockAdd.Unlock()
	return mock.AddFunc(ctx, data)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//     len(mockedSaldoRepo.AddCalls())
func (mock *SaldoRepoMock) AddCalls() []struct {
	Ctx  context.Context
	Data model.Saldo
} {
	var calls []struct {
		Ctx  context.Context
		Data model.Saldo
	}
	lockSaldoRepoMockAdd.RLock()
	calls = mock.calls.Add
	lockSaldoRepoMockAdd.RUnlock()
	return calls
}

// Find calls FindFunc.
func (mock *SaldoRepoMock) Find(ctx context.Context, params map[string]interface{}) ([]model.Saldo, int, error) {
	if mock.FindFunc == nil {
		panic("SaldoRepoMock.FindFunc: method is nil but SaldoRepo.Find was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params map[string]interface{}
	}{
		Ctx:    ctx,
		Params: params,
	}
	lockSaldoRepoMockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	lockSaldoRepoMockFind.Unlock()
	return mock.FindFunc(ctx, params)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//     len(mockedSaldoRepo.FindCalls())
func (mock *SaldoRepoMock) FindCalls() []struct {
	Ctx    context.Context
	Params map[string]interface{}
} {
	var calls []struct {
		Ctx    context.Context
		Params map[string]interface{}
	}
	lockSaldoRepoMockFind.RLock()
	calls = mock.calls.Find
	lockSaldoRepoMockFind.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *SaldoRepoMock) Get(ctx context.Context, value int) (model.Saldo, error) {
	if mock.GetFunc == nil {
		panic("SaldoRepoMock.GetFunc: method is nil but SaldoRepo.Get was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Value int
	}{
		Ctx:   ctx,
		Value: value,
	}
	lockSaldoRepoMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockSaldoRepoMockGet.Unlock()
	return mock.GetFunc(ctx, value)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedSaldoRepo.GetCalls())
func (mock *SaldoRepoMock) GetCalls() []struct {
	Ctx   context.Context
	Value int
} {
	var calls []struct {
		Ctx   context.Context
		Value int
	}
	lockSaldoRepoMockGet.RLock()
	calls = mock.calls.Get
	lockSaldoRepoMockGet.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *SaldoRepoMock) Update(ctx context.Context, data model.Saldo) (model.Saldo, error) {
	if mock.UpdateFunc == nil {
		panic("SaldoRepoMock.UpdateFunc: method is nil but SaldoRepo.Update was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Data model.Saldo
	}{
		Ctx:  ctx,
		Data: data,
	}
	lockSaldoRepoMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockSaldoRepoMockUpdate.Unlock()
	return mock.UpdateFunc(ctx, data)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedSaldoRepo.UpdateCalls())
func (mock *SaldoRepoMock) UpdateCalls() []struct {
	Ctx  context.Context
	Data model.Saldo
} {
	var calls []struct {
		Ctx  context.Context
		Data model.Saldo
	}
	lockSaldoRepoMockUpdate.RLock()
	calls = mock.calls.Update
	lockSaldoRepoMockUpdate.RUnlock()
	return calls
}
